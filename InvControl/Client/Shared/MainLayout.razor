@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase

<RadzenLayout style="position: relative;grid-template-areas: 'rz-sidebar rz-header' 'rz-sidebar rz-body'">
    <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
            <RadzenSidebarToggle Click="@(() => sidebarExpanded = !sidebarExpanded)" />
            <RadzenLabel Text="Header" />
        </RadzenStack>
    </RadzenHeader>

    <RadzenSidebar Responsive="false" @bind-Expanded="@sidebarExpanded" style="position: absolute; z-index: 3">
        <RadzenStack AlignItems="AlignItems.End" class="rz-p-2">
            <RadzenButton Icon="west" Variant="Variant.Text" ButtonStyle="ButtonStyle.Secondary"
                Click="@(() => sidebarExpanded = false)" />
        </RadzenStack>

        @if (isAuthenticated)
        {
            <NavMenu />
        }
    </RadzenSidebar>

    <RadzenBody>
        <div class="rz-p-2">
            @Body
        </div>
    </RadzenBody>

    @if (sidebarExpanded)
    {
        <div class="rz-dialog-mask" style="position: absolute; z-index: 2" @onclick="@(() => sidebarExpanded = false)">
        </div>
    }
    </RadzenLayout>

    <RadzenComponents />

    @code {
    [CascadingParameter] private Task<AuthenticationState>? authenticationState { get; set; }

    bool sidebarExpanded = false, isAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user?.Identity is not null)
            {
                isAuthenticated = user.Identity.IsAuthenticated;
            }
        }
    }
}
