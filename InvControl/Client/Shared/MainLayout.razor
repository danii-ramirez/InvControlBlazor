@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inherits LayoutComponentBase

<RadzenLayout style="position: relative;grid-template-areas: 'rz-sidebar rz-header' 'rz-sidebar rz-body'">
    <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween"
                     AlignItems="AlignItems.Center">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
                <RadzenSidebarToggle Click="@(() => sidebarExpanded = !sidebarExpanded)" />
                <RadzenImage Path="img/logo.webp" AlternateText="logo-conurbano" />
            </RadzenStack>

            <RadzenProfileMenu class="rz-mr-2">
                <Template>
                    @user?.FindFirst(ClaimTypes.Name)?.Value @user?.FindFirst(ClaimTypes.Surname)?.Value
                </Template>
                <ChildContent>
                    <RadzenProfileMenuItem Text="Cerrar sesión" Path="authentication/logout" Icon="logout" />
                </ChildContent>
            </RadzenProfileMenu>
        </RadzenStack>
    </RadzenHeader>

    <RadzenSidebar Responsive="false" @bind-Expanded="@sidebarExpanded" style="position: absolute; z-index: 3">
        <RadzenStack AlignItems="AlignItems.End" class="rz-p-2">
            <RadzenButton Icon="west" Variant="Variant.Text" ButtonStyle="ButtonStyle.Secondary" Click="@(() => sidebarExpanded = false)" />
        </RadzenStack>

        @if (isAuthenticated)
        {
            <NavMenu />
        }
    </RadzenSidebar>

    <RadzenBody>
        <div class="rz-p-4">
            @Body
        </div>
    </RadzenBody>

    @if (sidebarExpanded)
    {
        <div class="rz-dialog-mask" style="position: absolute; z-index: 2" @onclick="@(() => sidebarExpanded = false)">
        </div>
    }
</RadzenLayout>

<RadzenComponents />

@code {
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }

    bool sidebarExpanded = false, isAuthenticated;
    ClaimsPrincipal user;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            user = authState?.User;

            if (user?.Identity is not null)
            {
                isAuthenticated = user.Identity.IsAuthenticated;
            }
        }
    }
}
