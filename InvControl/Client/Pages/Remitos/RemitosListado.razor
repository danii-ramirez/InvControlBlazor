@page "/remitos/pendientes"
@page "/remitos/rechazados"

@using InvControl.Client.Components.Remitos

@attribute [Authorize]

@inject UsuariosService UsuariosService
@inject RemitosService RemitosService
@inject DialogService DialogService
@inject NavigationManager NavigationManager

@if (showForm)
{
    <RadzenText TagName="TagName.H3" TextStyle="TextStyle.H3" TextAlign="TextAlign.Center">
        @if (remitosPendientes)
        {
            <text>Remitos pendientes</text>
        }
        else
        {
            <text>Remitos rechazados</text>
        }
    </RadzenText>

    <RadzenDataGrid @ref="grid" TItem="RemitoDTO" Data="remitos" RowDoubleClick="(args => HandleClick(args.Data))"
                    AllowSorting="true" Density="Density.Compact" EmptyText="">
        <Columns>
            <RadzenDataGridColumn Property="@nameof(RemitoDTO.FechaIngreso)" Title="Fecha ingreso" FormatString="{0:dd/MM/yyyy hh:mm}" TextAlign="TextAlign.Center" Width="130px" />
            <RadzenDataGridColumn Property="@nameof(RemitoDTO.NumeroRemito)" Title="NÃºmero de remito" Width="150px" />
            <RadzenDataGridColumn Property="@nameof(RemitoDTO.Fecha)" Title="Fecha remito" FormatString="{0:dd/MM/yyyy}" TextAlign="TextAlign.Center" Width="115px" />
            <RadzenDataGridColumn Title="Transporte" Width="190px">
                <Template>
                    @if (context.IdTransporte != null)
                    {
                        <text>@context.NombreTransporte - @context.Patente</text>
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Chofer" Width="150px">
                <Template>
                    @if (context.IdChofer != null)
                    {
                        <text>@context.NombreChofer @context.ApellidoChofer</text>
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Usuario" Width="150px">
                <Template>
                    @context.NombreUsuario @context.ApellidoUsuario
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Sortable="false" TextAlign="TextAlign.Center" Width="45px">
                <Template>
                    <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="check" Variant="Variant.Flat" Shade="Shade.Lighter"
                                  Size="ButtonSize.Small" Click="(() => HandleClick(context))" @onclick:stopPropagation="true" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
else
{
    <Loader />
}

@code {
    List<RemitoDTO> remitos = new();
    bool showForm, remitosPendientes;
    RadzenDataGrid<RemitoDTO> grid = default!;

    protected override async Task OnInitializedAsync()
    {
        await UsuariosService.GetValidarAcceso();
        remitosPendientes = NavigationManager.ToBaseRelativePath(NavigationManager.Uri) == "remitos/pendientes";
        remitos = await RemitosService.GetRemitosDTO(null, null, remitosPendientes ? (int)RemitoEstado.Pendiente : (int)RemitoEstado.Rechazado);
        showForm = true;
    }

    private async Task HandleClick(RemitoDTO remito)
    {
        if (remitosPendientes)
        {
            var res = await DialogService.OpenAsync<RemitoInfo>(
                $"Remito nro. {remito.NumeroRemito}",
                new() { { "Remito", remito } });

            if (res != null && (bool)res)
            {
                remitos.Remove(remito);
                await grid.Reload();
            }
        }
        else
            NavigationManager.NavigateTo($"/remitos/ingreso/{remito.IdRemito}");
    }
}
