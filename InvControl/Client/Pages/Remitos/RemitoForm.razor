@page "/remitos/ingreso"
@page "/remitos/ingreso/{idRemito:int}"

@inject RemitosService RemitosService
@inject SKUService SKUService
@inject TransportesService TransportesService
@inject ChoferesService ChoferesService
@inject DialogService DialogService
@inject RadzenCustom RadzenCustom
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager

@if (showForm)
{
    <RadzenText TagName="TagName.H3" TextStyle="TextStyle.H3" TextAlign="TextAlign.Center" Text="Ingreso de remito" />

    <EditForm EditContext="editContext">
        <DataAnnotationsValidator />
        <CustomValidation @ref="customValidation" />

        <RadzenRow class="rz-mb-3">
            <RadzenColumn Size="12" SizeMD="6">
                <RadzenStack Orientation="Orientation.Vertical" Gap="5px">
                    <RadzenLabel Text="Número de remito:" Component="numero" />
                    <RadzenTextBox @bind-Value="@Remito.Numero" Name="numero" Disabled="reingreso" />
                    <ValidationMessage For="@(() => Remito.Numero)" />
                </RadzenStack>
            </RadzenColumn>

            <RadzenColumn Size="12" SizeMD="6">
                <RadzenStack Orientation="Orientation.Vertical" Gap="5px">
                    <RadzenLabel Text="Fecha de remito:" Component="fecha" />
                    <RadzenDatePicker @bind-Value="@Remito.Fecha" ShowCalendarWeek Max="DateTime.Now" DateFormat="dd/MM/yyyy" ShowTime="false" Name="fecha" Disabled="reingreso" />
                    <ValidationMessage For="@(() => Remito.Fecha)" />
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>

        <RadzenRow class="rz-mb-3">
            <RadzenColumn Size="12" SizeMD="6">
                <RadzenStack Orientation="Orientation.Vertical" Gap="5px">
                    <RadzenLabel Text="Chofer:" Component="chofer" />
                    <RadzenDropDown @bind-Value="Remito.IdChofer" Data="choferes" Name="chofer" AllowClear="true" Placeholder="Sin seleccionar"
                                    TextProperty="@nameof(Chofer.NombreCompleto)" ValueProperty="@nameof(Chofer.IdChofer)" Disabled="reingreso" />
                </RadzenStack>
            </RadzenColumn>

            <RadzenColumn Size="12" SizeMD="6">
                <RadzenStack Orientation="Orientation.Vertical" Gap="5px">
                    <RadzenLabel Text="Transporte:" Component="transporte" />
                    <RadzenDropDown @bind-Value="Remito.IdTransporte" Data="transportes" Name="transporte" AllowClear="true" Placeholder="Sin seleccionar"
                                    TextProperty="@nameof(Transporte.NombrePatente)" ValueProperty="@nameof(Transporte.IdTransporte)" Disabled="reingreso"/>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>

        @if (Remito.Detalle.Count == 0)
        {
            <RadzenStack class="rz-mb-3">
                <ValidationMessage For="@(() => Remito.Detalle)" />
            </RadzenStack>
        }

        <RadzenRow class="rz-mb-3">
            <RadzenColumn Size="12">
                <RadzenDataGrid @ref="grid" TItem="RemitoDetalle" Data="Remito.Detalle" Density="Density.Compact"
                                EmptyText="" Style="height: 20rem;">
                    <HeaderTemplate>
                        <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Small" Icon="add" Text="Agregar línea" Click="HandleClickAddRow" />
                    </HeaderTemplate>
                    <Columns>
                        <RadzenDataGridColumn Property="@nameof(RemitoDetalle.CodigoNombre)" Title="SKU">
                            <Template Context="data">
                                @if (data.IdSku == 0)
                                {
                                    <RadzenAutoComplete Data="skus" TextProperty="@nameof(SKUDTO.CodigoNombre)" Change="@(args => HandleChangeSkuAutoComplete(data, args))"
                                                        LoadData="@OnLoadData" MinLength="2" Style="width: 100%;" />
                                }
                                else
                                {
                                    <text>@data.CodigoNombre</text>
                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Property="@nameof(RemitoDetalle.Cantidad)" Title="Cantidad" Width="100px">
                            <Template Context="data">
                                <RadzenNumeric TValue="int?" @bind-Value="data.Cantidad" Min="1" TextAlign="TextAlign.Right" ShowUpDown="false" Style="width: 100%;" />
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TextAlign="TextAlign.Center" Width="50px">
                            <Template Context="data">
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter"
                                              Size="ButtonSize.Small" Click="@(() => HandleDeleteRow(data))" @onclick:stopPropagation="true" />
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenColumn>
        </RadzenRow>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" class="rz-mt-8">
            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="cancel" Text="Cancelar" Click="Cancelar" />
            <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="save" Text="Guardar" Click="Submit" />
        </RadzenStack>
    </EditForm>
}
else
{
    <Loader />
}

@code {
    [Parameter] public int? IdRemito {get;set;}

    Remito Remito { get; set; } = new();
    EditContext editContext = default!;
    CustomValidation customValidation = default!;

    List<SKUDTO> skus = new();
    List<Transporte> transportes = new();
    List<Chofer> choferes = new();
    bool showForm, reingreso;

    RadzenDataGrid<RemitoDetalle> grid = default!;

    protected override async Task OnInitializedAsync()
    {
        if(IdRemito != null)
        {
            var res = await RemitosService.GetRemito((int)IdRemito!, null);
            if(res == null)
            {
                NavigationManager.NavigateTo("/remitos/rechazados");
            }
            else
            {
                Remito = res;
            }

            reingreso = true;
        }

        transportes = await TransportesService.GetTransportes();
        choferes = await ChoferesService.GetChoferes();
        editContext = new(Remito);
        showForm = true;
    }

    private async Task Submit()
    {
        if (editContext.Validate())
        {
            var result = await DialogService.Confirm(
                Message.Confirm,
                Message.Title,
                new() { OkButtonText = "Sí", CancelButtonText = "No" });

            if (result != null && (bool)result)
            {
                RadzenCustom.OpenBusyWithLoader();
                var res = await RemitosService.PostRemito(Remito);
                RadzenCustom.CloseDialog();

                if (res.Success)
                {
                    NotificationService.Notify(NotificationSeverity.Success, Message.SaveSuccess);
                    Clear();
                }
                else
                    customValidation.DisplayErrors(res.Errors!);
            }
        }
    }

    private async Task Cancelar()
    {
        var result = await DialogService.Confirm(
            Message.Cancel,
            Message.Title,
            new() { OkButtonText = "Sí", CancelButtonText = "No" });

        if (result != null && (bool)result)
        {
            Clear();
        }
    }

    private void Clear()
    {
        Remito = new();
        editContext = new(Remito);
    }

    private async Task HandleClickAddRow()
    {
        RemitoDetalle detalle = new();
        Remito.Detalle.Add(detalle);
        await grid.Reload();
    }

    private void HandleChangeSkuAutoComplete(RemitoDetalle data, dynamic args)
    {
        var sku = skus.Find(x => x.CodigoNombre.ToUpper() == args?.Trim().ToUpper());
        if (sku != null)
        {
            data.IdSku = sku.IdSku;
            data.Codigo = sku.Codigo;
            data.NombreSku = sku.NombreSku;

            skus.Clear();
        }
    }

    private async Task OnLoadData(LoadDataArgs args)
    {
        if (!string.IsNullOrWhiteSpace(args.Filter?.Trim()))
        {
            skus = await SKUService.GetSugerencias(args.Filter);
        }
    }

    private async Task HandleDeleteRow(RemitoDetalle data)
    {
        Remito.Detalle.Remove(data);
        await grid.Reload();
    }
}
