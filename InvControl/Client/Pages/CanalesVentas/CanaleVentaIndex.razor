@page "/canalesventas"
@using InvControl.Client.Components.CanalesVentas
@attribute [Authorize]

@inject CanalesVentasService CanalesVentasService
@inject UsuariosService UsuariosService
@inject DialogService DialogService
@inject RadzenCustom RadzenCustom
@inject NotificationService NotificationService

@if (showForm)
{
    <RadzenText TagName="TagName.H3" TextStyle="TextStyle.H3" TextAlign="TextAlign.Center" Text="Canales de ventas" />

    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" class="rz-mt-3">
        <RadzenDataGrid @ref="refData" TItem="CanalVenta" Data="canales" AllowSorting="true" Density="Density.Compact"
                        AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        FilterMode="FilterMode.Simple" EmptyText="" Style="width: 55rem;">
            <HeaderTemplate>
                <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Small"
                              Icon="add" Text="Agregar canal de venta" Click="HandleClickAgregar" />
            </HeaderTemplate>
            <Columns>
                <RadzenDataGridColumn Property="@nameof(CanalVenta.Codigo)" Title="Código" TextAlign="TextAlign.Right" Width="100px" />
                <RadzenDataGridColumn Property="@nameof(CanalVenta.Nombre)" Title="Nombre" Width="200px" />
                <RadzenDataGridColumn Property="@nameof(CanalVenta.Descripcion)" Title="Descripción" />
                <RadzenDataGridColumn TextAlign="TextAlign.Center" Width="50px" Sortable="false">
                    <Template>
                        <RadzenButton ButtonStyle="ButtonStyle.Warning" Icon="edit" Variant="Variant.Flat" Shade="Shade.Lighter"
                                      Size="ButtonSize.Small" Click="@(() => HandleClickEditar(context))" @onclick:stopPropagation="true" title="Editar">
                        </RadzenButton>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TextAlign="TextAlign.Center" Width="50px" Sortable="false">
                    <Template>
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter"
                                      Size="ButtonSize.Small" Click="@(() => HandleClickBorrar(context))" @onclick:stopPropagation="true" title="Borrar">
                        </RadzenButton>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </RadzenStack>
}
else
{
    <Loader />
}

@code {
    List<CanalVenta> canales = new();

    bool showForm;
    RadzenDataGrid<CanalVenta> refData;

    protected override async Task OnInitializedAsync()
    {
        if ((await UsuariosService.GetValidarAcceso()).Item1)
        {
            canales = await CanalesVentasService.GetCanalesVentas();
            showForm = true;
        }
    }

    private async Task HandleClickAgregar()
    {
        CanalVenta canal = new();

        var res = await DialogService.OpenAsync<CanalVentaForm>(
            "Formulario de canales de ventas",
            new() { { "CanalVenta", canal } },
            new() { ShowClose = false, CloseDialogOnEsc = false });

        if (res != null)
        {
            canales.Add(res);
            await refData.Reload();
        }
    }

    private async Task HandleClickEditar(CanalVenta canal)
    {
        var res = await DialogService.OpenAsync<CanalVentaForm>(
            "Formulario de canales de ventas",
            new() { { "CanalVenta", canal.Clone() } },
            new() { ShowClose = false, CloseDialogOnEsc = false });

        if (res != null)
        {
            var c = (CanalVenta)res;
            var canalOriginal = canales.Find(x => x.IdCanalVenta == c.IdCanalVenta)!;
            canalOriginal.Codigo = c.Codigo;
            canalOriginal.Nombre = c.Nombre;
            canalOriginal.Descripcion = c.Descripcion;
            await refData.Reload();
        }
    }

    private async Task HandleClickBorrar(CanalVenta canal)
    {
        var res = await DialogService.Confirm(
            $"¿Desea borrar el canal de venta {canal.Nombre.ToUpper()}?",
            Message.Title,
            new() { OkButtonText = "Sí", CancelButtonText = "No", ShowClose = false });

        if (res != null && (bool)res)
        {
            RadzenCustom.OpenBusyWithLoader("Borrando...");
            var result = await CanalesVentasService.DeleteCanalVenta(canal.IdCanalVenta);
            RadzenCustom.CloseDialog();
            if (result)
            {
                NotificationService.Notify(NotificationSeverity.Success, "El canal de venta se borro correctamente");
                canales.Remove(canal);
                await refData.Reload();
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "No es posible eliminar el canal de venta");
            }
        }
    }
}
