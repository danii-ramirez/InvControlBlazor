@page "/transportes"
@using InvControl.Client.Components.Transportes
@attribute [Authorize]

@inject TransportesService TransportesService
@inject UsuariosService UsuariosService
@inject DialogService DialogService
@inject RadzenCustom RadzenCustom
@inject NotificationService NotificationService

@if (showForm)
{
    <RadzenText TagName="TagName.H3" TextStyle="TextStyle.H3" TextAlign="TextAlign.Center" Text="Transportes" class="rz-mb-3" />

    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center">
        <RadzenDataGrid @ref="refData" TItem="Transporte" Data="transportes" AllowSorting="true" Density="Density.Compact"
                        EmptyText="" Style="width: 50rem;">
            <HeaderTemplate>
                <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Small"
                              Icon="add" Text="Agregar transporte" Click="HandleClickAgregar" />
            </HeaderTemplate>
            <Columns>
                <RadzenDataGridColumn Property="@nameof(Transporte.Nombre)" Title="Nombre" />
                <RadzenDataGridColumn Property="@nameof(Transporte.Patente)" Title="Patente" />
                <RadzenDataGridColumn Title="Activo" Width="100px" TextAlign="TextAlign.Center">
                    <Template>
                        @if (context.Activo)
                        {
                            <text>Sí</text>
                        }
                        else
                        {
                            <text>No</text>
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TextAlign="TextAlign.Center" Width="50px" Sortable="false">
                    <Template>
                        <RadzenButton ButtonStyle="ButtonStyle.Warning" Icon="edit" Variant="Variant.Flat"
                                      Shade="Shade.Lighter" Size="ButtonSize.Small" Click="@(() => HandleClickEditar(context))"
                                      @onclick:stopPropagation="true" title="Editar" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TextAlign="TextAlign.Center" Width="50px" Sortable="false">
                    <Template>
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat"
                                      Shade="Shade.Lighter" Size="ButtonSize.Small" Click="@(() => HandleClickBorrar(context))"
                                      @onclick:stopPropagation="true" title="Borrar" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </RadzenStack>
}
else
{
    <Loader />
}

@code {
    List<Transporte> transportes = new();
    bool showForm;
    RadzenDataGrid<Transporte> refData;

    protected override async Task OnInitializedAsync()
    {
        var success = await UsuariosService.GetValidarAcceso();
        if (success.Item1)
        {
            transportes = await TransportesService.GetTransportes();
            showForm = true;
        }
    }

    private async Task HandleClickAgregar()
    {
        Transporte transporte = new();

        var res = await DialogService.OpenAsync<TransporteForm>(
            "Formulario de transportes",
            new() { { "Transporte", transporte } },
            new() { ShowClose = false, CloseDialogOnEsc = false });

        if (res != null)
        {
            transportes.Add(res);
            await refData.Reload();
        }
    }

    private async Task HandleClickEditar(Transporte transporte)
    {
        var res = await DialogService.OpenAsync<TransporteForm>(
            "Formulario de choferes",
            new() { { "Transporte", transporte } },
            new() { ShowClose = false, CloseDialogOnEsc = false });

        if (res != null)
        {
            var t = (Transporte)res;

            var transporteOriginal = transportes.Find(x => x.IdTransporte == t.IdTransporte)!;
            transporteOriginal.Nombre = t.Nombre;
            transporteOriginal.Patente = t.Patente;
            transporteOriginal.Activo = t.Activo;
            await refData.Reload();
        }
    }

    private async Task HandleClickBorrar(Transporte transporte)
    {
        var res = await DialogService.Confirm(
            $"¿Desea borrar el transporte {transporte.Nombre.ToUpper()}?",
            Message.Title,
            new() { OkButtonText = "Sí", CancelButtonText = "No", ShowClose = false });

        if (res != null && (bool)res)
        {
            RadzenCustom.OpenBusyWithLoader("Borrando...");
            var result = await TransportesService.DeleteTransporte(transporte.IdTransporte);
            RadzenCustom.CloseDialog();
            if (result)
            {
                NotificationService.Notify(NotificationSeverity.Success, "El transporte se borro correctamente");
                transportes.Remove(transporte);
                await refData.Reload();
            }
            else
                NotificationService.Notify(NotificationSeverity.Error, "No es posible eliminar el transporte");
        }
    }
}
