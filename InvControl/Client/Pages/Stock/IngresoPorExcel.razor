@page "/stock/movimientos/bimbo"
@using Microsoft.AspNetCore.SignalR.Client
@attribute [Authorize]

@implements IAsyncDisposable
@inject ILogger<IngresoPorExcel> Logger
@inject UsuariosService UsuariosService
@inject StockService StockService
@inject NavigationManager Navigation
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject RadzenCustom RadzenCustom

@if (showForm)
{
    <RadzenText TagName="TagName.H3" TextStyle="TextStyle.H3" TextAlign="TextAlign.Center" Text="Ingreso de movimientos de Bimbo" class="rz-mb-3" />

    @if (!showGrid)
    {
        <RadzenRow JustifyContent="JustifyContent.Center" class="rz-mb-3">
            <RadzenColumn Size="12" SizeMD="4">
                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="5px" Style="width: 100%;">
                    <RadzenCard Variant="Variant.Outlined" Style="width: 100%;">
                        <RadzenStack Orientation="Orientation.Vertical" Gap="5px" Style="width: 100%;">
                            <RadzenLabel Text="Seleccione un archivo:" Component="upload" />
                            <InputFile OnChange="SeleccionarArchivo" AdditionalAttributes="@(new Dictionary<string, object>(){{"accept", ".csv,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel"},{"id", "upload"}, {"disabled", disabledButtons}})" />
                        </RadzenStack>
                    </RadzenCard>

                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="5px" Style="width: 100%;" class="rz-mt-5">
                        <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="upload_file" Text="Procesar" Click="HandleClickProcesar" Style="width: 7rem;" Disabled="disabledButtons" title="Procesar" />
                    </RadzenStack>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>

        @if (showProgessBar)
        {
            <RadzenRow JustifyContent="JustifyContent.Center">
                <RadzenColumn Size="12" SizeMD="8">
                    <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Secondary" @bind-Value="@porcentaje" />
                </RadzenColumn>
            </RadzenRow>
        }
    }
    else
    {
        <RadzenRow JustifyContent="JustifyContent.Center" class="rz-mb-3">
            <RadzenColumn Size="12" SizeMD="8">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.End" Gap="1rem">
                    <RadzenStack Orientation="Orientation.Vertical" Gap="5px">
                        <RadzenLabel Text="Estado:" Component="estado" />
                        <RadzenDropDown Data="@(Enum.GetValues(typeof(BimboOperacion)).Cast<Enum>())" @bind-Value=@bimboOperacion
                                        Style="width: 20rem;" Name="estado" Change="HandleEstadoChange" />
                    </RadzenStack>

                    <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small"
                                  Icon="file_save" Text="Exportar a Excel" Click="HandleClickExportToExcel" Style="height: 2rem;" />
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>

        <RadzenRow JustifyContent="JustifyContent.Center">
            <RadzenColumn Size="12" SizeMD="8">
                <RadzenDataGrid @ref="grid" TItem="MovimientoBimbo" Data="movimientosGrid" AllowVirtualization="true" AllowSorting="true" AllowGrouping="true"
                                AllowFiltering="true" FilterMode="FilterMode.Simple" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                CellRender="CellRender" Density="Density.Compact" Style="height: 25rem;" GroupPanelText="@RadzenHelper.Traducciones["GroupPanelText"]">
                    <Columns>
                        <RadzenDataGridColumn Property="@nameof(MovimientoBimbo.CanalVenta)" Title="Canal" TextAlign="TextAlign.Right" Width="90px" />
                        <RadzenDataGridColumn Property="@nameof(MovimientoBimbo.NumeroRemito)" Title="Nro. de Remito" Width="150px" />
                        <RadzenDataGridColumn Property="@nameof(MovimientoBimbo.CodigoSku)" Title="Código" TextAlign="TextAlign.Right" Width="100px" />
                        <RadzenDataGridColumn Property="@nameof(MovimientoBimbo.NombreSku)" Title="Nombre" Groupable="false" />
                        <RadzenDataGridColumn Property="@nameof(MovimientoBimbo.Cantidad)" Title="Cantidad" TextAlign="TextAlign.Right" Groupable="false" Width="100px" />
                        <RadzenDataGridColumn Property="@nameof(MovimientoBimbo.TipoEstoque)" Title="Tipo de estoque" Width="150px" />
                        <RadzenDataGridColumn Property="@nameof(MovimientoBimbo.MotivoAjuste)" Title="Motivo de ajuste" Width="150px" />
                    </Columns>
                </RadzenDataGrid>
            </RadzenColumn>
        </RadzenRow>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" class="rz-mt-8">
            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="cancel" Text="Cancelar" Click="HandleClickCancelar" />
            <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="save" Text="Guardar" Click="HandleClickGuardar" />
        </RadzenStack>
    }
}
else
{
    <Loader />
}

@code {
    HubConnection hubConnection;
    IBrowserFile selectedFile;

    string fileName;
    byte[] excelData;

    List<MovimientoBimbo> movimientos = new();
    List<MovimientoBimbo> movimientosGrid;
    int total = 0;
    double porcentaje;
    bool showForm, showProgessBar, showGrid, disabledButtons;

    RadzenDataGrid<MovimientoBimbo> grid;

    BimboOperacion bimboOperacion;

    protected override async Task OnInitializedAsync()
    {
        await UsuariosService.GetValidarAcceso();
        showForm = true;
    }

    private async Task InicializarHub()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/procesamientoHub"))
            .Build();

        hubConnection.On<int>("ProcesoInicial", (total) =>
        {
            this.total = total;
            RadzenCustom.CloseDialog();
            showProgessBar = true;
            StateHasChanged();
        });

        hubConnection.On<int>("ProcesoActualizado", (porcentaje) =>
        {
            this.porcentaje = Math.Round(((double)porcentaje / total) * 100, 2);
            StateHasChanged();
        });

        hubConnection.On<MovimientoBimbo>("ActualziarGrid", async (movimiento) =>
        {
            if (movimientos.Exists(x => x.CanalVenta == movimiento.CanalVenta & x.CodigoSku == movimiento.CodigoSku))
                movimientos.Find(x => x.CanalVenta == movimiento.CanalVenta & x.CodigoSku == movimiento.CodigoSku).Cantidad += movimiento.Cantidad;
            else
                movimientos.Add(movimiento);

            StateHasChanged();
            await grid.Reload();
        });

        hubConnection.On("ProcesoTerminado", async () =>
        {
            movimientosGrid = movimientos;
            bimboOperacion = BimboOperacion.Todos;
            showGrid = true;
            await CerrarHub();
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task CerrarHub()
    {
        await hubConnection.StopAsync();
        await hubConnection.DisposeAsync();
    }

    private async Task SeleccionarArchivo(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;

        var file = e.File;
        if (file != null)
        {
            using var memoryStream = new MemoryStream();
            await file.OpenReadStream(long.MaxValue).CopyToAsync(memoryStream);
            excelData = memoryStream.ToArray();
            fileName = file.Name;
        }
    }

    private async Task HandleClickProcesar()
    {
        if (selectedFile != null)
        {
            var res = await DialogService.Confirm(
                $"¿Desea procesar el archivo {fileName}?",
                Message.Title,
                new() { OkButtonText = Message.OkButtonText, CancelButtonText = Message.CancelButtonText });

            if (res != null && (bool)res)
            {
                try
                {
                    disabledButtons = true;
                    RadzenCustom.OpenBusyWithLoader("Cargando...");
                    await InicializarHub();
                    await hubConnection.SendAsync("ProcesarMovimientosBimbo", excelData);
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, "{msg}", ex.Message);
                }
            }
        }
        else
            NotificationService.Notify(NotificationSeverity.Info, "Debe seleccionar un archivo");
    }

    private void CellRender(DataGridCellRenderEventArgs<MovimientoBimbo> args)
    {
        if (args.Data.IdSku == null)
        {
            args.Attributes.Add("class", "rz-background-color-danger-lighter");
        }

        if (args.Column.Property == "CanalVenta" && args.Data.IdCanalVenta == null)
        {
            args.Attributes.Add("style", "background-color: var(--rz-warning-lighter) !important;");
        }
    }

    private async Task HandleClickGuardar()
    {
        var confirm = await DialogService.Alert(
              "<p><strong>¡ATENCIÓN!</strong></p><p>Solo se procesaran los que estén en el estado: <strong>Disponible para procesar</strong>.</p>",
              Message.Title,
              new() { ShowClose = false, CloseDialogOnEsc = false, OkButtonText = "Confirmar", Width = "fit-content" });

        if ((bool)confirm)
        {
            var result = await DialogService.Confirm(
                    Message.Confirm,
                    Message.Title,
                    new() { OkButtonText = Message.OkButtonText, CancelButtonText = Message.CancelButtonText });

            if (result != null && (bool)result)
            {
                RadzenCustom.OpenBusyWithLoader();
                var res = await StockService.PostMovimientosBimbo(movimientos.FindAll(x => x.IdSku != null & x.IdCanalVenta != null));
                RadzenCustom.CloseDialog();
                NotificationService.Notify(NotificationSeverity.Success, Message.SaveSuccess);
                Clear();
            }
        }
    }

    private async Task HandleClickCancelar()
    {
        var result = await DialogService.Confirm(
            Message.Cancel,
            Message.Title,
            new() { OkButtonText = Message.OkButtonText, CancelButtonText = Message.CancelButtonText });

        if (result != null && (bool)result)
            Clear();
    }

    private async Task HandleEstadoChange()
    {
        if (bimboOperacion == BimboOperacion.Todos)
        {
            movimientosGrid = movimientos;
        }
        else if (bimboOperacion == BimboOperacion.Disponible)
        {
            movimientosGrid = movimientos.FindAll(x => x.IdSku != null & x.IdCanalVenta != null);
        }
        else if (bimboOperacion == BimboOperacion.SkuNoEncontrado)
        {
            movimientosGrid = movimientos.FindAll(x => x.IdSku == null);
        }
        else if (bimboOperacion == BimboOperacion.CanalVentaNoEncontrado)
        {
            movimientosGrid = movimientos.FindAll(x => x.IdCanalVenta == null);
        }

        await grid.Reload();
    }

    private async Task HandleClickExportToExcel()
    {
        RadzenCustom.OpenBusyWithLoader("Generando Excel");
        await StockService.PostMovimientosBimboExportToExcel(movimientos);
        RadzenCustom.CloseDialog();
    }

    private void Clear()
    {
        movimientos.Clear();
        movimientosGrid = null;
        disabledButtons = false;
        showProgessBar = false;
        total = 0;
        porcentaje = 0;
        selectedFile = null;
        fileName = null;
        excelData = null;
        showGrid = false;
        bimboOperacion = BimboOperacion.Todos;
    }

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}
