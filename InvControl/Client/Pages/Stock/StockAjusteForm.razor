@page "/stock/ajuste"

@attribute [Authorize]

@inject UsuariosService UsuariosService
@inject StockService StockService
@inject SKUService SKUService
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject RadzenCustom RadzenCustom

@if (showForm)
{
    <RadzenText TagName="TagName.H3" TextStyle="TextStyle.H3" TextAlign="TextAlign.Center" Text="Ajuste de stock" class="rz-mb-3" />

    <EditForm EditContext="editContext">
        <DataAnnotationsValidator />

        <RadzenRow class="rz-mb-3">
            <RadzenColumn Size="12" SizeMD="6" OffsetMD="3">
                <RadzenStack Orientation="Orientation.Vertical" Gap="5px">
                    <RadzenLabel Text="Movimiento de stock:" Component="tipoMovimiento" />
                    <RadzenDropDown @bind-Value="Stock.IdTipoMovimiento" Data="tiposMovimientos" Name="tipoMovimiento" Style="width: 20rem;"
                                    TextProperty="@nameof(TipoMovimiento.Nombre)" ValueProperty="@nameof(TipoMovimiento.IdTipoMovimiento)" />
                    <ValidationMessage For="@(() => Stock.IdTipoMovimiento)" />
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>

        <RadzenRow class="rz-mb-3">
            <RadzenColumn Size="12" SizeMD="6" OffsetMD="3">
                <RadzenStack Orientation="Orientation.Vertical" Gap="5px">
                    <RadzenLabel Text="Observaciones:" Component="observaciones" />
                    <RadzenTextArea @bind-Value="Stock.Observaciones" MaxLength="255" Name="observaciones" Style="min-height: 50px; max-height: 100px;" />
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>

        <RadzenRow class="rz-mb-1">
            <RadzenColumn Size="12" SizeMD="6" OffsetMD="3">
                <ValidationMessage For="@(() => Stock.Detalle)" />
            </RadzenColumn>
        </RadzenRow>

        <RadzenRow class="rz-mb-3">
            <RadzenColumn Size="12" SizeMD="6" OffsetMD="3">
                <RadzenDataGrid @ref="grid" TItem="StockAjusteDetalle" Data="Stock.Detalle" Density="Density.Compact"
                                EmptyText="" Style="height: 25rem;">
                    <HeaderTemplate>
                        <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Small" Icon="add" Text="Agregar línea" Click="HandleClickAddRow" />
                    </HeaderTemplate>
                    <Columns>
                        <RadzenDataGridColumn Property="@nameof(RemitoDetalle.CodigoNombre)" Title="SKU">
                            <Template Context="data">
                                @if (data.IdSku == 0)
                                {
                                    <RadzenAutoComplete @ref="refAutoComplete" Data="skus" TextProperty="@nameof(SKUDTO.CodigoNombre)" Change="@(args => HandleChangeSkuAutoComplete(data, args))"
                                                        LoadData="@OnLoadData" MinLength="3" Style="width: 100%;" />
                                }
                                else
                                {
                                    <text>@data.CodigoNombre</text>
                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Property="@nameof(RemitoDetalle.Cantidad)" Title="Unidades" Width="100px">
                            <Template Context="data">
                                <RadzenNumeric @ref="refCantidad" TValue="int?" @bind-Value="data.Cantidad" Min="1" Max="99999" TextAlign="TextAlign.Right" ShowUpDown="false" Style="width: 100%;" />
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TextAlign="TextAlign.Center" Width="50px">
                            <Template Context="data">
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter"
                                              Size="ButtonSize.Small" Click="@(() => HandleDeleteRow(data))" @onclick:stopPropagation="true" />
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenColumn>
        </RadzenRow>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" class="rz-mt-8">
            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="cancel" Text="Cancelar" Click="Cancelar" />
            <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="save" Text="Guardar" Click="Submit" />
        </RadzenStack>
    </EditForm>
}
else
{
    <Loader />
}

@code {
    StockAjuste Stock { get; set; } = new();
    EditContext editContext;

    List<TipoMovimiento> tiposMovimientos;
    bool showForm;

    List<SKUDTO> skus = new();
    RadzenDataGrid<StockAjusteDetalle> grid;
    RadzenAutoComplete refAutoComplete;
    RadzenNumeric<int?> refCantidad;

    protected override async Task OnInitializedAsync()
    {
        await UsuariosService.GetValidarAcceso();
        tiposMovimientos = await StockService.GetTiposMovimientos(null, null, false, true);
        editContext = new(Stock);
        showForm = true;
    }

    private async Task Submit()
    {
        if (editContext.Validate())
        {
            if (Stock.Detalle.Where(x => x.IdSku == 0 || x.Cantidad == null || x.Cantidad == 0).Count() > 0)
            {
                await DialogService.Alert("Debe completar todas las líneas", Message.Title);
            }
            else
            {
                var result = await DialogService.Confirm(
                    Message.Confirm,
                    Message.Title,
                    new() { OkButtonText = Message.OkButtonText, CancelButtonText = Message.CancelButtonText });

                if (result != null && (bool)result)
                {
                    Stock.Tipo = tiposMovimientos.Find(x => x.IdTipoMovimiento == Stock.IdTipoMovimiento).Tipo;

                    RadzenCustom.OpenBusyWithLoader();
                    var res = await StockService.PostStockAjuste(Stock);
                    RadzenCustom.CloseDialog();

                    if (res)
                    {
                        NotificationService.Notify(NotificationSeverity.Success, Message.SaveSuccess);
                        Clear();
                    }
                }
            }
        }
    }

    private async Task Cancelar()
    {
        var result = await DialogService.Confirm(Message.Cancel, Message.Title, new() { OkButtonText = "Sí", CancelButtonText = "No" });
        if (result != null && (bool)result)
        {
            Clear();
        }
    }

    private async Task HandleClickAddRow()
    {
        StockAjusteDetalle detalle = new();
        Stock.Detalle.Add(detalle);
        await grid.Reload();
        editContext.NotifyFieldChanged(new FieldIdentifier(Stock, nameof(StockAjuste.Detalle)));
        await Task.Delay(1);
        await refAutoComplete.FocusAsync();
    }

    private async Task HandleChangeSkuAutoComplete(StockAjusteDetalle data, dynamic args)
    {
        var sku = skus.Find(x => x.CodigoNombre.ToUpper() == args?.Trim().ToUpper());
        if (sku != null)
        {
            data.IdSku = sku.IdSku;
            data.Codigo = sku.Codigo;
            data.NombreSku = sku.NombreSku;

            skus.Clear();
            await refCantidad.FocusAsync();
        }
    }

    private async Task OnLoadData(LoadDataArgs args)
    {
        if (!string.IsNullOrWhiteSpace(args.Filter?.Trim()))
        {
            skus = await SKUService.GetSugerencias(args.Filter);
        }
    }

    private async Task HandleDeleteRow(StockAjusteDetalle data)
    {
        Stock.Detalle.Remove(data);
        await grid.Reload();
        editContext.NotifyFieldChanged(new FieldIdentifier(Stock, nameof(StockAjuste.Detalle)));
    }

    private void Clear()
    {
        Stock = new();
        editContext = new(Stock);
    }
}
