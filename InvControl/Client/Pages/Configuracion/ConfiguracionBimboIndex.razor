@page "/configuracion/bimbo"
@using InvControl.Client.Components.Configuracion
@attribute [Authorize]

@inject UsuariosService UsuariosService
@inject ParametrosService ParametrosService
@inject DialogService DialogService
@inject RadzenCustom RadzenCustom
@inject NotificationService NotificationService

@if (showForm)
{
    <RadzenText TagName="TagName.H3" TextStyle="TextStyle.H3" TextAlign="TextAlign.Center" Text="Configuración de Bimbo" class="rz-mb-3" />

    <RadzenRow class="rz-mb-3">
        <RadzenColumn Size="12" SizeMD="8" OffsetMD="2">
            <RadzenStack Orientation="Orientation.Vertical" Gap="5px">
                <RadzenLabel Text="Motivos de ajuste" />
                <RadzenDataGrid @ref="gridMotivos" TItem="ParametroBimbo" Data="motivos" AllowSorting="true" Density="Density.Compact" Style="height: 20rem;" EmptyText="">
                    <HeaderTemplate>
                        <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Small"
                                      Icon="add" Text="Agregar motivo de ajuste" Click="HandleClickAddMotivo" />
                    </HeaderTemplate>
                    <Columns>
                        <RadzenDataGridColumn Property="@nameof(ParametroBimbo.Nombre)" Title="Nombre" Width="160px" />
                        <RadzenDataGridColumn Property="@nameof(ParametroBimbo.Descripcion)" Title="Descripción" />
                        <RadzenDataGridColumn TextAlign="TextAlign.Center" Width="50px" Sortable="false">
                            <Template>
                                <RadzenButton ButtonStyle="ButtonStyle.Warning" Icon="edit" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Small"
                                              Click="(() => HandleClickEdit(context))" @onclick:stopPropagation="true" title="Editar">
                                </RadzenButton>
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TextAlign="TextAlign.Center" Width="50px" Sortable="false">
                            <Template>
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Small"
                                              Click="(() => HandleClickDeleteMotivo(context))" @onclick:stopPropagation="true" title="Editar">
                                </RadzenButton>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow class="rz-mb-3">
        <RadzenColumn Size="12" SizeMD="8" OffsetMD="2">
            <RadzenStack Orientation="Orientation.Vertical" Gap="5px">
                <RadzenLabel Text="Tipos de estoques" />
                <RadzenDataGrid @ref="gridEstoques" TItem="ParametroBimbo" Data="estoques" AllowSorting="true" Density="Density.Compact" Style="height: 20rem;" EmptyText="">
                    <HeaderTemplate>
                        <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Small"
                                      Icon="add" Text="Agregar tipo de estoque" Click="HandleClickAddEstoque" />
                    </HeaderTemplate>
                    <Columns>
                        <RadzenDataGridColumn Property="@nameof(ParametroBimbo.Nombre)" Title="Nombre" Width="160px" />
                        <RadzenDataGridColumn Property="@nameof(ParametroBimbo.Descripcion)" Title="Descripción" />
                        <RadzenDataGridColumn TextAlign="TextAlign.Center" Width="50px" Sortable="false">
                            <Template>
                                <RadzenButton ButtonStyle="ButtonStyle.Warning" Icon="edit" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Small"
                                              Click="(() => HandleClickEdit(context))" @onclick:stopPropagation="true" title="Editar">
                                </RadzenButton>
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TextAlign="TextAlign.Center" Width="50px" Sortable="false">
                            <Template>
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Small"
                                              Click="(() => HandleClickDeleteEstoque(context))" @onclick:stopPropagation="true" title="Editar">
                                </RadzenButton>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
}
else
{
    <Loader />
}

@code {
    bool showForm;
    List<ParametroBimbo> motivos;
    List<ParametroBimbo> estoques;

    RadzenDataGrid<ParametroBimbo> gridMotivos;
    RadzenDataGrid<ParametroBimbo> gridEstoques;

    protected override async Task OnInitializedAsync()
    {
        if ((await UsuariosService.GetValidarAcceso()).Item1)
        {
            var parametros = await ParametrosService.GetParametrosBimbo();
            motivos = parametros.FindAll(x => x.EsMotivoAjuste);
            estoques = parametros.FindAll(x => !x.EsMotivoAjuste);

            showForm = true;
        }
    }

    private async Task HandleClickAddMotivo()
    {
        ParametroBimbo parametro = new();
        parametro.EsMotivoAjuste = true;

        var res = await DialogService.OpenAsync<ConfiguracionBimboForm>(
           "Configuración de Bimbo",
           new() { { "ParametroBimbo", parametro } },
           new() { ShowClose = false, CloseDialogOnEsc = false });

        if (res != null)
        {
            motivos.Add(res);
            await gridMotivos.Reload();
        }
    }

    private async Task HandleClickEdit(ParametroBimbo parametro)
    {
        var res = await DialogService.OpenAsync<ConfiguracionBimboForm>(
           "Configuración de Bimbo",
           new() { { "ParametroBimbo", parametro.Clone() } },
           new() { ShowClose = false, CloseDialogOnEsc = false });

        if (res != null)
        {
            var editParametro = (ParametroBimbo)res;
            parametro.Nombre = editParametro.Nombre;
            parametro.Descripcion = editParametro.Descripcion;
        }
    }

    private async Task HandleClickDeleteMotivo(ParametroBimbo parametro)
    {
        var res = await DialogService.Confirm(
             $"¿Desea borrar el motivo de ajuste {parametro.Nombre.ToUpper()}?",
             Message.Title,
             new() { OkButtonText = "Sí", CancelButtonText = "No", ShowClose = false });

        if (res != null && (bool)res)
        {
            RadzenCustom.OpenBusyWithLoader("Borrando...");
            var result = await ParametrosService.DeleteParametroBimbo(parametro.IdParametroBimbo);
            RadzenCustom.CloseDialog();
            if (result)
            {
                NotificationService.Notify(NotificationSeverity.Success, Message.DeleleteResponse);
                motivos.Remove(parametro);
                await gridMotivos.Reload();
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Ha ocurrido un error!");
            }
        }
    }

    private async Task HandleClickAddEstoque()
    {
        ParametroBimbo parametro = new();
        parametro.EsMotivoAjuste = false;

        var res = await DialogService.OpenAsync<ConfiguracionBimboForm>(
           "Configuración de Bimbo",
           new() { { "ParametroBimbo", parametro } },
           new() { ShowClose = false, CloseDialogOnEsc = false });

        if (res != null)
        {
            estoques.Add(res);
            await gridEstoques.Reload();
        }
    }

    private async Task HandleClickDeleteEstoque(ParametroBimbo parametro)
    {
        var res = await DialogService.Confirm(
             $"¿Desea borrar el tipo de estoque {parametro.Nombre.ToUpper()}?",
             Message.Title,
             new() { OkButtonText = "Sí", CancelButtonText = "No", ShowClose = false });

        if (res != null && (bool)res)
        {
            RadzenCustom.OpenBusyWithLoader("Borrando...");
            var result = await ParametrosService.DeleteParametroBimbo(parametro.IdParametroBimbo);
            RadzenCustom.CloseDialog();
            if (result)
            {
                NotificationService.Notify(NotificationSeverity.Success, Message.DeleleteResponse);
                estoques.Remove(parametro);
                await gridEstoques.Reload();
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Ha ocurrido un error!");
            }
        }
    }
}
