@page "/usuarios"
@using InvControl.Client.Components.Usuarios
@attribute [Authorize]

@inject UsuariosService UsuariosService
@inject RolesService RolesService
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject RadzenCustom RadzenCustom

@if (showForm)
{
    <RadzenText TagName="TagName.H3" TextStyle="TextStyle.H3" TextAlign="TextAlign.Center" Text="Usuarios" />

    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" class="rz-mt-5">
        <RadzenDataGrid @ref="refData" TItem="Usuario" Data="usuarios" Density="Density.Compact" AllowSorting="true"
                        AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        FilterMode="FilterMode.Simple" Responsive="true" EmptyText="" Style="width: 75rem;">
            <HeaderTemplate>
                @if (acciones.Exists(x => x == Accion.Crear))
                {
                    <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Small"
                                  Icon="add" Text="Agregar usuario" Click="HandleClickAgregar" />
                }
            </HeaderTemplate>
            <Columns>
                <RadzenDataGridColumn Property="@nameof(Usuario.User)" Title="Usuario" />
                <RadzenDataGridColumn Property="@nameof(Usuario.Nombre)" Title="Nombre" />
                <RadzenDataGridColumn Property="@nameof(Usuario.Apellido)" Title="Apellido" />
                <RadzenDataGridColumn Property="@nameof(Usuario.DescripcionRol)" Title="Rol" />
                <RadzenDataGridColumn Property="@nameof(Usuario.Activo)" Title="Activo" TextAlign="TextAlign.Center" Filterable="false">
                    <Template>
                        @if (context.Activo)
                        {
                            <text>Sí</text>
                        }
                        else
                        {
                            <text>No</text>
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="@nameof(Usuario.Bloqueado)" Title="Bloqueado" TextAlign="TextAlign.Center" Filterable="false">
                    <Template>
                        @if (context.Bloqueado)
                        {
                            <text>Sí</text>
                        }
                        else
                        {
                            <text>No</text>
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TextAlign="TextAlign.Center" Width="50px" Sortable="false" Visible="acciones.Exists(x => x == Accion.Editar)">
                    <Template>
                        <RadzenButton ButtonStyle="ButtonStyle.Warning" Icon="edit" Variant="Variant.Flat"
                                      Shade="Shade.Lighter" Size="ButtonSize.Small" Click="@(() => HandleClickEditar(context))"
                                      @onclick:stopPropagation="true" title="Editar" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TextAlign="TextAlign.Center" Width="50px" Sortable="false"
                                      Visible="acciones.Exists(x => x == Accion.ResetPass)">
                    <Template>
                        <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="lock_reset" Variant="Variant.Flat"
                                      Shade="Shade.Lighter" Size="ButtonSize.Small" Click="@(() => HandleClickResetPass(context))"
                                      @onclick:stopPropagation="true" title="Restablecer contraseña" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TextAlign="TextAlign.Center" Width="50px" Sortable="false"
                                      Visible="acciones.Exists(x => x == Accion.Borrar)">
                    <Template>
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat"
                                      Shade="Shade.Lighter" Size="ButtonSize.Small" Click="@(() => HandleClickBorrar(context))"
                                      @onclick:stopPropagation="true" title="Borrar" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </RadzenStack>
}
else
{
    <Loader />
}

@code {
    List<Usuario> usuarios = new();
    List<Rol> roles = new();
    bool showForm;
    RadzenDataGrid<Usuario> refData = default!;
    List<string> acciones = new();

    protected override async Task OnInitializedAsync()
    {
        var access = await UsuariosService.GetValidarAcceso();
        if (access.Item1)
        {
            acciones = access.Item2!;
            usuarios = await UsuariosService.GetUsuarios();
            roles = await RolesService.GetRoles();
            showForm = true;
        }
    }

    private async Task HandleClickAgregar()
    {
        Usuario usuario = new();

        var res = await DialogService.OpenAsync<UsuarioForm>(
            "Formulario de usuarios",
            new() { { "Usuario", usuario }, { "Roles", roles } },
            new() { ShowClose = false, CloseDialogOnEsc = false });

        if (res != null)
        {
            usuarios.Add(usuario);
            await refData.Reload();
        }
    }

    private async Task HandleClickEditar(Usuario usuario)
    {
        var res = await DialogService.OpenAsync<UsuarioForm>(
            $"Formulario de usuarios",
            new() { { "Usuario", usuario.Clone() }, { "Roles", roles } },
            new() { ShowClose = false, CloseDialogOnEsc = false });

        if (res != null)
        {
            var u = (Usuario)res;

            var userOriginal = usuarios.Find(x => x.IdUsuario == u.IdUsuario)!;
            userOriginal.User = u.User;
            userOriginal.Nombre = u.Nombre;
            userOriginal.Apellido = u.Apellido;
            userOriginal.Activo = u.Activo;
            userOriginal.IdRol = u.IdRol;
            userOriginal.DescripcionRol = roles.Find(x => x.IdRol == u.IdRol)!.Descripcion;

            await refData.Reload();
        }
    }

    private async Task HandleClickResetPass(Usuario usuario)
    {
        var res = await DialogService.Confirm(
            $"Desea restablecer la contraseña de {usuario.User.ToUpper()}?",
            Message.Title,
            new() { OkButtonText = "Sí", CancelButtonText = "No", ShowClose = false });

        if ((bool)res)
        {
            RadzenCustom.OpenBusy("Restableciendo contraseña");
            var result = await UsuariosService.GetResetPassword(usuario.IdUsuario);
            RadzenCustom.CloseDialog();

            if (result)
            {
                NotificationService.Notify(NotificationSeverity.Success, "La contraseña se restablecio correctamente");
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "No se pudo restablecer la contraseña");
            }
        }
    }

    private async Task HandleClickBorrar(Usuario usuario)
    {
        var res = await DialogService.Confirm(
            $"Desea borrar el usuario {usuario.User.ToUpper()}?",
            Message.Title,
            new() { OkButtonText = "Sí", CancelButtonText = "No", ShowClose = false });

        if ((bool)res)
        {

        }
    }
}
