@inject CanalesVentasService CanalesVentasService
@inject DialogService DialogService
@inject NotificationService NotificationService

@if (editContext != null)
{
    <EditForm EditContext="editContext" OnSubmit="Submit" autocomplete="off">
        <DataAnnotationsValidator />
        <CustomValidation @ref="customValidation" />

        <RadzenStack Orientation="Orientation.Vertical" Gap="5px">
            <RadzenLabel Text="Código:" Component="codigo" />
            <RadzenNumeric @bind-Value="CanalVenta.Codigo" TextAlign="TextAlign.Right" Name="codigo" Min="0"
                           ShowUpDown="false" Disabled="isBusy" />
            <ValidationMessage For="@(() => CanalVenta.Codigo)" />
        </RadzenStack>

        <RadzenStack Orientation="Orientation.Vertical" Gap="5px" class="rz-mt-3">
            <RadzenLabel Text="Nombre:" Component="nombre" />
            <RadzenTextBox @bind-Value="CanalVenta.Nombre" Name="nombre" MaxLength="25" Disabled="isBusy" />
            <ValidationMessage For="@(() => CanalVenta.Nombre)" />
        </RadzenStack>

        <RadzenStack Orientation="Orientation.Vertical" Gap="5px" class="rz-mt-3">
            <RadzenLabel Text="Descripción:" Component="descripcion" />
            <RadzenTextBox @bind-Value="CanalVenta.Descripcion" Name="descripcion" MaxLength="50" Disabled="isBusy" />
            <ValidationMessage For="@(() => CanalVenta.Descripcion)" />
        </RadzenStack>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" class="rz-mt-8">
            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="cancel" Text="Cancelar" Click="Cancelar"
                          Disabled="isBusy" />
            <RadzenButton ButtonType="Radzen.ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Icon="save" Text="Guardar"
                          IsBusy="isBusy" BusyText="Guardando" />
        </RadzenStack>
    </EditForm>
}

@code {
    [Parameter] public CanalVenta CanalVenta { get; set; } = default!;

    EditContext editContext = default!;
    CustomValidation customValidation = default!;

    bool isBusy;

    protected override void OnInitialized()
    {
        editContext = new(CanalVenta);
    }

    private async Task Submit()
    {
        if (editContext.Validate())
        {
            var result = await DialogService.Confirm(
                Message.Confirm,
                Message.Title,
                new() { OkButtonText = "Sí", CancelButtonText = "No", ShowClose = false });

            if (result != null && (bool)result)
            {
                isBusy = true;

                Response res;
                if (CanalVenta.IdCanalVenta == 0)
                    res = await CanalesVentasService.PostCanalVenta(CanalVenta);
                else
                    res = await CanalesVentasService.PutCanalVenta(CanalVenta);

                isBusy = false;

                if (res.Success)
                {
                    NotificationService.Notify(NotificationSeverity.Success, Message.SaveSuccess);
                    DialogService.Close(CanalVenta);
                }
                else
                {
                    customValidation.DisplayErrors(res.Errors!);
                }
            }
        }
    }

    private async Task Cancelar()
    {
        var result = await DialogService.Confirm(
            Message.Cancel,
            Message.Title,
            new() { OkButtonText = "Sí", CancelButtonText = "No", ShowClose = false });

        if (result != null && (bool)result)
        {
            DialogService.Close();
        }
    }
}
