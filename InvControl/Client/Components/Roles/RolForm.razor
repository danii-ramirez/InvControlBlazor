@inject RolesService RolesService
@inject DialogService DialogService
@inject NotificationService NotificationService

@if (editContext != null)
{
    <EditForm EditContext="editContext" OnSubmit="Submit" autocomplete="off">
        <DataAnnotationsValidator />
        <CustomValidation @ref="customValidation" />

        <RadzenStack Orientation="Orientation.Vertical" Gap="5px">
            <RadzenLabel Text="Descripción:" Component="descripcion" />
            <RadzenTextBox @bind-Value="Rol.Descripcion" Name="descripcion" Disabled=isBusy />
            <ValidationMessage For="@(() => Rol.Descripcion)" />
        </RadzenStack>

        <RadzenStack Orientation="Orientation.Vertical" Gap="5px" class="rz-mt-3">
            <RadzenLabel Text="Permisos:" />
            <RadzenDataGrid @ref="grid" TItem="Permiso" Data="@permisosPadre" RowRender="@RowRender"
                            LoadChildData="@LoadChildData" RowClick="RowClick" Density="Density.Compact" Style="height: 20rem;">
                <Columns>
                    <RadzenDataGridColumn TextAlign="Radzen.TextAlign.Center" Width="80px">
                        <Template Context="data">
                            <RadzenCheckBox TValue="bool" Value="data.Checked"
                                            Disabled="@(data.Descripcion == "Home" || isBusy)" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Property="@nameof(Permiso.Descripcion)" Title="Descripción" />
                </Columns>
            </RadzenDataGrid>
            <ValidationMessage For="@(() => Rol.Permisos)" />
        </RadzenStack>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" class="rz-mt-8">
            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="cancel" Text="Cancelar" Click="Cancelar"
                          Disabled="isBusy" />
            <RadzenButton ButtonType="Radzen.ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Icon="save" Text="Guardar"
                          IsBusy="isBusy" BusyText="Guardando" />
        </RadzenStack>
    </EditForm>
}

@code {
    [Parameter] public Rol Rol { get; set; } = default!;
    [Parameter] public List<Permiso> Permisos { get; set; } = default!;

    EditContext editContext = default!;
    CustomValidation customValidation = default!;

    RadzenDataGrid<Permiso> grid = default!;
    List<Permiso> permisosPadre = new();
    bool isBusy;

    protected override void OnInitialized()
    {
        Permisos.ForEach(x => x.Checked = false);

        if (Rol.IdRol == 0)
        {
            Permisos.Find(x => x.Descripcion == "Home")!.Checked = true;
        }
        else
        {
            foreach (var rp in Rol.Permisos)
            {
                var p = Permisos.Find(x => x.IdPermiso == rp.IdPermiso)!;
                p.Checked = true;
            }
        }

        permisosPadre = Permisos.FindAll(x => x.IdPadre == null);

        editContext = new(Rol);
    }

    private async Task Submit()
    {
        Rol.Permisos.Clear();
        Rol.Permisos = Permisos.FindAll(x => x.Checked);

        if (editContext.Validate())
        {
            var result = await DialogService.Confirm(
                Message.Confirm,
                Message.Title,
                new() { OkButtonText = "Sí", CancelButtonText = "No", ShowClose = false });

            if (result != null && (bool)result)
            {
                isBusy = true;

                Response res;
                if (Rol.IdRol == 0)
                    res = await RolesService.PostRol(Rol);
                else
                    res = await RolesService.PutRol(Rol);

                isBusy = false;

                if (res.Success)
                {
                    NotificationService.Notify(NotificationSeverity.Success, Message.SaveSuccess);
                    DialogService.Close(Rol);
                }
                else
                {
                    customValidation.DisplayErrors(res.Errors!);
                }
            }
        }
    }

    private async Task Cancelar()
    {
        var result = await DialogService.Confirm(
            Message.Cancel,
            Message.Title,
            new() { OkButtonText = "Sí", CancelButtonText = "No", ShowClose = false });

        if (result != null && (bool)result)
        {
            DialogService.Close();
        }
    }

    private void RowRender(RowRenderEventArgs<Permiso> args)
    {
        args.Expandable = Permisos.Where(e => e.IdPadre == args.Data.IdPermiso).Any();
    }

    private void LoadChildData(DataGridLoadChildDataEventArgs<Permiso> args)
    {
        args.Data = Permisos.Where(e => e.IdPadre == args.Item.IdPermiso);
    }

    private void RowClick(DataGridRowMouseEventArgs<Permiso> args)
    {
        if (!isBusy)
        {
            if (args.Data.Descripcion != "Home")
            {
                args.Data.Checked = !args.Data.Checked;

                if (args.Data.Checked)
                {
                    if (args.Data.IdPadre.HasValue)
                    {
                        SeleccionarPadres(args.Data);
                    }
                }
                else
                {
                    DeseleccionarHijos(args.Data);
                }
            }
        }
    }

    private void SeleccionarPadres(Permiso permiso)
    {
        var padre = Permisos.FirstOrDefault(p => p.IdPermiso == permiso.IdPadre!);
        if (padre != null)
        {
            padre.Checked = true;
            SeleccionarPadres(padre);
        }
    }

    private void DeseleccionarHijos(Permiso permiso)
    {
        var hijos = Permisos.Where(p => p.IdPadre == permiso.IdPermiso).ToList();
        foreach (var hijo in hijos)
        {
            hijo.Checked = false;
            DeseleccionarHijos(hijo);
        }
    }
}
