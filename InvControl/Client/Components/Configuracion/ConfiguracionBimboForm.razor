@inject ParametrosService ParametrosService
@inject DialogService DialogService
@inject NotificationService NotificationService

<EditForm EditContext="editContext" OnSubmit="Submit" autocomplete="off">
    <DataAnnotationsValidator />
    <CustomValidation @ref="customValidation" />

    <RadzenStack Orientation="Orientation.Vertical" Gap="5px" class="rz-mb-3">
        <RadzenLabel Text="Nombre:" Component="nombre" />
        <RadzenTextBox @bind-Value="ParametroBimbo.Nombre" MaxLength="50" Name="nombre" Disabled="(isBusy | ParametroBimbo.IdTipoBimboConcepto == (int)BimboConcepto.NombreColumna)" />
        <ValidationMessage For="@(() => ParametroBimbo.Nombre)" />
    </RadzenStack>

    <RadzenStack Orientation="Orientation.Vertical" Gap="5px">
        <RadzenLabel Text="Descripción:" Component="Descripción" />
        <RadzenTextArea @bind-Value="ParametroBimbo.Descripcion" MaxLength="255" Name="Descripción" Style="min-height: 50px; max-height: 100px;" Disabled="isBusy" />
    </RadzenStack>

    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" class="rz-mt-8">
        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="cancel" Text="Cancelar" Click="Cancelar" Disabled="isBusy" />
        <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Icon="save" Text="Guardar" IsBusy="isBusy" BusyText="Guardando" />
    </RadzenStack>
</EditForm>

@code {
    [Parameter] public ParametroBimbo ParametroBimbo { get; set; }

    EditContext editContext;
    CustomValidation customValidation;

    bool isBusy;

    protected override void OnInitialized()
    {
        editContext = new(ParametroBimbo);
    }

    private async Task Submit()
    {
        isBusy = true;
        if (editContext.Validate())
        {
            var result = await DialogService.Confirm(
                Message.Confirm,
                Message.Title,
                new() { OkButtonText = "Sí", CancelButtonText = "No", ShowClose = false });

            if (result != null && (bool)result)
            {
                Response res;
                if (ParametroBimbo.IdParametroBimbo == 0)
                    res = await ParametrosService.PostParametroBimbo(ParametroBimbo);
                else
                    res = await ParametrosService.PutParametroBimbo(ParametroBimbo);

                if (res.Success)
                {
                    NotificationService.Notify(NotificationSeverity.Success, Message.SaveSuccess);
                    DialogService.Close(ParametroBimbo);
                }
                else
                    customValidation.DisplayErrors(res.Errors!);
            }
        }
        isBusy = false;
    }

    private async Task Cancelar()
    {
        var result = await DialogService.Confirm(Message.Cancel, Message.Title, new() { OkButtonText = "Sí", CancelButtonText = "No" });
        if (result != null && (bool)result)
            DialogService.Close();
    }
}
