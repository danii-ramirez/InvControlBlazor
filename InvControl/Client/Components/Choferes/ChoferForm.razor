@inject ChoferesService ChoferesService
@inject DialogService DialogService
@inject NotificationService NotificationService

<EditForm EditContext="editContext" OnSubmit="Submit" autocomplete="off">
    <DataAnnotationsValidator />
    <CustomValidation @ref="customValidation" />

    <RadzenStack Orientation="Orientation.Vertical" Gap="5px">
        <RadzenLabel Text="Nombre:" Component="nombre" />
        <RadzenTextBox @bind-Value="Chofer.Nombre" Name="nombre" Disabled="isBusy" />
        <ValidationMessage For="@(() => Chofer.Nombre)" />
    </RadzenStack>

    <RadzenStack Orientation="Orientation.Vertical" Gap="5px" class="rz-mt-3">
        <RadzenLabel Text="Apellido:" Component="apellido" />
        <RadzenTextBox @bind-Value="Chofer.Apellido" Name="apellido" Disabled="isBusy" />
        <ValidationMessage For="@(() => Chofer.Apellido)" />
    </RadzenStack>

    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="5px" class="rz-mt-3">
        <RadzenLabel Text="Activo:" Component="activo" />
        <RadzenCheckBox @bind-Value=@Chofer.Activo Name="activo" Disabled="isBusy" />
    </RadzenStack>

    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" class="rz-mt-8">
        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="cancel" Text="Cancelar" Click="Cancelar"
                      Disabled="isBusy" />
        <RadzenButton ButtonType="Radzen.ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Icon="save" Text="Guardar"
                      IsBusy="isBusy" BusyText="Guardando" />
    </RadzenStack>
</EditForm>

@code {
    [Parameter] public Chofer Chofer { get; set; } = default!;

    EditContext editContext = default!;
    CustomValidation customValidation = default!;

    bool isBusy;

    protected override void OnInitialized()
    {
        editContext = new(Chofer);
    }

    private async Task Submit()
    {
        if (editContext.Validate())
        {
            var result = await DialogService.Confirm(
                Message.Confirm,
                Message.Title,
                new() { OkButtonText = "Sí", CancelButtonText = "No", ShowClose = false });

            if (result != null && (bool)result)
            {
                isBusy = true;

                Response res;
                if (Chofer.IdChofer == 0)
                    res = await ChoferesService.PostChoferes(Chofer);
                else
                    res = await ChoferesService.PutChoferes(Chofer);

                isBusy = false;

                if (res.Success)
                {
                    NotificationService.Notify(NotificationSeverity.Success, Message.SaveSuccess);
                    DialogService.Close(Chofer);
                }
                else
                {
                    customValidation.DisplayErrors(res.Errors!);
                }
            }
        }
    }


    private async Task Cancelar()
    {
        var result = await DialogService.Confirm(
            Message.Cancel,
            Message.Title,
            new() { OkButtonText = "Sí", CancelButtonText = "No" });

        if (result != null && (bool)result)
        {
            DialogService.Close();
        }
    }
}
