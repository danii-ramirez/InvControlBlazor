@inject UsuariosService UsuariosService
@inject DialogService DialogService
@inject NotificationService NotificationService

@if (editContext != null)
{
    <EditForm EditContext="editContext" OnSubmit="Submit" autocomplete="off">
        <DataAnnotationsValidator />
        <CustomValidation @ref="customValidation" />

        <RadzenStack Orientation="Orientation.Vertical" Gap="5px">
            <RadzenLabel Text="Usuario:" Component="user" />
            <RadzenTextBox @bind-Value="Usuario.User" MaxLength="18" Name="user" Disabled="isBusy" />
            <ValidationMessage For="@(() => Usuario.User)" />
        </RadzenStack>

        <RadzenStack Orientation="Orientation.Horizontal" Gap="5px" class="rz-mt-3">
            <RadzenStack Orientation="Orientation.Vertical" Gap="5px" Style="width: 50%;">
                <RadzenLabel Text="Nombre:" Component="nombre" />
                <RadzenTextBox @bind-Value="Usuario.Nombre" MaxLength="50" Name="nombre" Disabled="isBusy" />
                <ValidationMessage For="@(() => Usuario.Nombre)" />
            </RadzenStack>

            <RadzenStack Orientation="Orientation.Vertical" Gap="5px" Style="width: 50%;">
                <RadzenLabel Text="Apellido:" Component="apellido" />
                <RadzenTextBox @bind-Value="Usuario.Apellido" MaxLength="50" Name="apellido" Disabled="isBusy" />
                <ValidationMessage For="@(() => Usuario.Apellido)" />
            </RadzenStack>
        </RadzenStack>

        <RadzenStack Orientation="Orientation.Horizontal" Gap="5px" class="rz-mt-3">
            <RadzenStack Orientation="Orientation.Vertical" Gap="5px" Style="width: 50%;">
                <RadzenLabel Text="Rol:" Component="rol" />
                <RadzenDropDown @bind-Value=@Usuario.IdRol Data=@Roles TextProperty="@nameof(Rol.Descripcion)"
                                ValueProperty="@nameof(Rol.IdRol)" AllowFiltering="true" Name="rol" Style="width: 100%;"
                                Disabled="isBusy" />
                <ValidationMessage For="@(() => Usuario.IdRol)" />
            </RadzenStack>

            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="5px" Style="width: 50%;">
                <RadzenLabel Text="Activo:" Component="activo" />
                <RadzenCheckBox @bind-Value=@Usuario.Activo Name="activo" Disabled="isBusy" />
            </RadzenStack>
        </RadzenStack>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" class="rz-mt-8">
            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="cancel" Text="Cancelar" Click="Cancelar" Disabled="isBusy" />
            <RadzenButton ButtonType="Radzen.ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Icon="save" Text="Guardar" IsBusy="isBusy" BusyText="Guardando" />
        </RadzenStack>
    </EditForm>
}

@code {
    [Parameter] public Usuario Usuario { get; set; } 
    [Parameter] public List<Rol> Roles { get; set; } 

    EditContext editContext;
    CustomValidation customValidation;

    bool isBusy;

    protected override void OnInitialized()
    {
        if (Usuario.IdUsuario == 0)
            Usuario.Activo = true;

        editContext = new(Usuario);
    }

    private async Task Submit()
    {
        if (editContext.Validate())
        {
            var result = await DialogService.Confirm(
                Message.Confirm,
                Message.Title,
                new() { OkButtonText = "Sí", CancelButtonText = "No", ShowClose = false });

            if (result != null && (bool)result)
            {
                isBusy = true;
                Response res;
                if (Usuario.IdUsuario == 0)
                    res = await UsuariosService.PostUsuario(Usuario);
                else
                    res = await UsuariosService.PutUsuario(Usuario);

                isBusy = false;

                if (res.Success)
                {
                    NotificationService.Notify(NotificationSeverity.Success, Message.SaveSuccess);
                    DialogService.Close(Usuario);
                }
                else
                {
                    customValidation.DisplayErrors(res.Errors!);
                }
            }
        }
    }

    private async Task Cancelar()
    {
        var result = await DialogService.Confirm(
            Message.Cancel,
            Message.Title,
            new() { OkButtonText = "Sí", CancelButtonText = "No", ShowClose = false });

        if (result != null && (bool)result)
        {
            DialogService.Close();
        }
    }
}
